Version 1.4 (21/8/2023)
- Zero allocation finders! Managed path finding queries now have the option to reduce managed allocations, allowing them to be used without creating any garbage at all.
- Dijkstra algorithm supports edge modifiers.
- The NavMesh can now generate more straight paths for grid like meshes.

** Upgrade note **
In previous versions, the Path result class had a Segments property. This has been removed
to allow for zero allocation results. The segments of a path can now only be obtained by using the indexed on the class itself.

Version 1.3.1 (29/4/2023)
- Fixed Triangle.ClosestPoint returning NaN's for some degenerate triangles
- Added editor checks to avoid infinite running jobs when the cost of an edge is NaN

Version 1.3 (6/3/2023)
- Native Dijkstra's algorithm, which you can use to find all shortest paths from a starting location to all reachable locations, optionally within a maximum cost budget
- Added a managed finder to perform Dijkstra's algorithm without needing to worry about job scheduling
- Added an example that demonstrates Dijkstra's algorithm
- NavMesh now has nearest location query
- Nearest location queries for all graphs that support it have a more performant overload for when it's called many times in a row
- Better default values for navmesh, linegraph and platformergraph construction
- Square grid example improved
- Fixed a bug in the navmesh example
- Extra flexibility for path straightening (SSFA), allowing it to be used on other types of paths as well (not included)
- Documentation improved

Version 1.2.3 (11/2/2023)
- Fixed insert point bug in native quadtree and octree
- Fixed navmesh bug where generation in job allocated TempJob containers instead of Temp
- Added assembly definition file for faster compilation

Version 1.2.2 (3/12/2022)
- Fixed name of NodeGraphNode
- Fixed incorrect traversing of node graph nodes that have a cost of infinity
- Fixed broken link in documentation

Version 1.2 (27/11/2022)
- LineGraph added. A versatile 3D waypoint graph with support for queries from and to anywhere along the graph lines/edges.
- NodeGraph added. A simple node to node 3D graph.
- Overall pathfinding performance boosted by using ref comparisons where possible
- Closest location query for PlatformerGraph, useful in a top down context
- Simplified PlatformerGraphBuilder
- PlatformerGraph now has optional Id's per edge, allowing for easy mapping back to MonoBehaviour script via GetInstanceId.
- PlatformerGraph's closest edge query now accepts a delegate to check for obstructions in the line of sight.
- Internal trees of NavMesh and PlatformerGraph are public now, useful for advanced location queries
- New octree and quadtree implementation (https://github.com/bartofzo/NativeTrees), significantly boosting raycast performance for the NavMesh and PlatformerGraph
- Bugfix: fixed incorrect traversing of platformergraph edge with a cost of infinity (which should be unwalkable)

Version 1.1 (17/10/2022)
- NavMeshGraph: Fast welding of vertices together using Unity's Job system, useful for frequent updates
- NavMeshGraph: Fast calculating the NavMesh using Unity's Job system, useful for frequent updates
- NavMeshGraph: AABB triangle overlap queries, useful for cutting out triangles in a given area
- Breaking change: The NavMeshGraph constructor using NativeArrays now makes an internal copy of the data. Which prevents memory safety issues and allows the graph to be generated on another thread.
- PlatformerGraph: Fast welding of vertices together using Unity's Job system, useful for frequent updates
- PlatformerGraph: Can be populated and calculated inside of a burst compiled job now, useful for frequent updates
- PlatformerGraph: Graph can be drawn using the PlatformerGraphDrawer with automatic joining of vertices, making it extremely easy to generate a graph on the fly
- Both the NavMeshGraph and PlatformerGraph now use NativeLists instead of arrays.
  There is no performance impact and they behave the same. The advantage is that this now allows them to be pre-allocated and populated in a separate thread.
- Fast copying of NavMesh, Platformer Graph, Quad- and Octree
- Tested with Unity 2021.3

Version 1.0.2 (2/6/2022)
- Fixed a bug in the HexGrid where cells that have a cost of infinity were still walkable

Version 1.0.1 (15/3/2022)
- Removed redundant comments
- Small folder restructure so examples and managed folder can be removed without causing compile errors
- Fixed a mistake where the square grid had a constructor that accepted hexgridcells

Version 1.0
- This is the first release of AnyPath. For a complete overview of the features, see the documentation
  at https://anypath.bartvandesande.nl
  